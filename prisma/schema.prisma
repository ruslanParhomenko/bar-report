generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  OBSERVER
  BAR
  CUCINA
}

model User {
  id        Int      @id @default(autoincrement())
  mail      String   @unique
  role      Role     @default(OBSERVER)
  createdAt DateTime @default(now())
}

model Employee {
  id        Int      @id @default(autoincrement())
  name      String
  position  String
  rate      String?
  createdAt DateTime @default(now())
}

model BreakeList {
  id   Int      @id @default(autoincrement())
  date DateTime
  rows Row[]

  @@index([date])
}

model Row {
  id         Int        @id @default(autoincrement())
  externalId String
  name       String?
  scheduleId Int
  hours      Hour[]
  schedule   BreakeList @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
}

model Hour {
  id    Int    @id @default(autoincrement())
  hour  String
  value String
  rowId Int
  row   Row    @relation(fields: [rowId], references: [id], onDelete: Cascade)

  @@unique([rowId, hour])
}

model DailyReport {
  id         Int          @id @default(autoincrement())
  date       DateTime
  total      Float        @default(0)
  cashVerify CashVerify[]
  expenses   Expense[]
  tobacco    Tobacco[]
}

model CashVerify {
  id       Int         @id @default(autoincrement())
  hours    String
  value    String
  reportId Int
  report   DailyReport @relation(fields: [reportId], references: [id], onDelete: Cascade)
}

model Tobacco {
  id         Int         @id @default(autoincrement())
  name       String
  stock      Int         @default(0)
  incoming   Int?
  outgoing   Int?
  finalStock String
  reportId   Int
  report     DailyReport @relation(fields: [reportId], references: [id], onDelete: Cascade)
}

model Expense {
  id       Int         @id @default(autoincrement())
  name     String
  sum      String
  reportId Int
  report   DailyReport @relation(fields: [reportId], references: [id], onDelete: Cascade)
}

model ReportBarRealtime {
  id         String   @id @default(uuid())
  user_email String?
  form_data  Json?
  created_at DateTime @default(now())

  @@map("report_bar_realtime")
}

model ReportCucinaRealtime {
  id         String   @id @default(uuid())
  user_email String?
  form_data  Json?
  created_at DateTime @default(now())

  @@map("report_cucina_realtime")
}

model remarks_realtime {
  id         String   @id @default(uuid())
  user_email String?  @unique(map: "remarks_realtime_user_email_idx")
  form_data  Json?
  created_at DateTime @default(now())

  @@map("remarks_realtime")
}

model RemarkReport {
  id        Int      @id @default(autoincrement())
  date      DateTime
  createdAt DateTime @default(now())
  remarks   Remark[]
}

model Remark {
  id         Int          @id @default(autoincrement())
  name       String       @default("")
  dayHours   String       @default("")
  nightHours String       @default("")
  reason     String       @default("")
  penality   String       @default("")
  reportId   Int
  report     RemarkReport @relation(fields: [reportId], references: [id], onDelete: Cascade)
}

model DailyReportCucina {
  id    Int      @id @default(autoincrement())
  date  DateTime
  notes String?

  shifts           Shift[]           @relation("DailyReportCucinaShifts")
  remains          Remain[]          @relation("DailyReportCucinaRemains")
  preparedSalads   PreparedSalad[]   @relation("DailyReportCucinaPreparedSalads")
  preparedSeconds  PreparedSecond[]  @relation("DailyReportCucinaPreparedSeconds")
  preparedDesserts PreparedDessert[] @relation("DailyReportCucinaPreparedDesserts")
  cutting          Cutting[]         @relation("DailyReportCucinaCutting")
  staff            Staff[]           @relation("DailyReportCucinaStaff")
  movement         Movement[]        @relation("DailyReportCucinaMovement")
  writeOff         WriteOff[]        @relation("DailyReportCucinaWriteOff")
}

model Shift {
  id        Int               @id @default(autoincrement())
  name      String?
  time      String
  over      String
  employees String
  report    DailyReportCucina @relation("DailyReportCucinaShifts", fields: [reportId], references: [id], onDelete: Cascade)
  reportId  Int
}

model Remain {
  id       Int               @id @default(autoincrement())
  product  String
  portions String
  weight   String
  report   DailyReportCucina @relation("DailyReportCucinaRemains", fields: [reportId], references: [id], onDelete: Cascade)
  reportId Int
}

model PreparedSalad {
  id       Int               @id @default(autoincrement())
  product  String
  portions String
  weight   String
  time     String?
  report   DailyReportCucina @relation("DailyReportCucinaPreparedSalads", fields: [reportId], references: [id], onDelete: Cascade)
  reportId Int
}

model PreparedSecond {
  id       Int               @id @default(autoincrement())
  product  String
  portions String
  weight   String
  time     String?
  report   DailyReportCucina @relation("DailyReportCucinaPreparedSeconds", fields: [reportId], references: [id], onDelete: Cascade)
  reportId Int
}

model PreparedDessert {
  id       Int               @id @default(autoincrement())
  product  String
  portions String
  weight   String
  time     String?
  report   DailyReportCucina @relation("DailyReportCucinaPreparedDesserts", fields: [reportId], references: [id], onDelete: Cascade)
  reportId Int
}

model Cutting {
  id       Int               @id @default(autoincrement())
  product  String
  portions String?
  weight   String
  time     String?
  report   DailyReportCucina @relation("DailyReportCucinaCutting", fields: [reportId], references: [id], onDelete: Cascade)
  reportId Int
}

model Staff {
  id       Int               @id @default(autoincrement())
  product  String
  portions String
  weight   String
  time     String?
  report   DailyReportCucina @relation("DailyReportCucinaStaff", fields: [reportId], references: [id], onDelete: Cascade)
  reportId Int
}

model Movement {
  id          Int               @id @default(autoincrement())
  nameOutside String
  nameInside  String
  weight      String
  report      DailyReportCucina @relation("DailyReportCucinaMovement", fields: [reportId], references: [id], onDelete: Cascade)
  reportId    Int
}

model WriteOff {
  id       Int               @id @default(autoincrement())
  product  String
  weight   String
  reason   String
  report   DailyReportCucina @relation("DailyReportCucinaWriteOff", fields: [reportId], references: [id], onDelete: Cascade)
  reportId Int
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}



generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

model Employee {
  id        Int     @id @default(autoincrement())
  name      String
  position  String
  createdAt DateTime @default(now())
}



model BreakeList {
  id       Int      @id @default(autoincrement())
  date     DateTime
  rows     Row[]

  @@index([date])
}

model Row {
  id         Int      @id @default(autoincrement())
  externalId String   
  name       String?  
  schedule   BreakeList @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  scheduleId Int

  hours      Hour[]
}
model Hour {
  id    Int    @id @default(autoincrement())
  hour  String 
  value String 

  row    Row    @relation(fields: [rowId], references: [id], onDelete: Cascade)
  rowId  Int

  @@unique([rowId, hour]) 
}




model DailyReport {
  id        Int            @id @default(autoincrement())
  date      DateTime       @default(now())
  total     Float          @default(0)

  cashVerify CashVerify[]
  tobacco    Tobacco[]
  expenses   Expense[]
}

model CashVerify {
  id       Int          @id @default(autoincrement())
  hours    String
  value    String
  report   DailyReport  @relation(fields: [reportId], references: [id], onDelete: Cascade)
  reportId Int
}

model Tobacco {
  id         Int          @id @default(autoincrement())
  name       String
  stock      Int          @default(0)
  incoming   Int?
  outgoing   Int?
  finalStock String
  report     DailyReport  @relation(fields: [reportId], references: [id], onDelete: Cascade)
  reportId   Int
}

model Expense {
  id       Int          @id @default(autoincrement())
  name     String
  sum      String
  report   DailyReport  @relation(fields: [reportId], references: [id], onDelete: Cascade)
  reportId Int
}

model ReportBarRealtime {
  id         String   @id @default(uuid())
  user_email String?
  form_data  Json?
  created_at DateTime @default(now())

  @@map("report_bar_realtime")
}





model StopListRecord {
  id        Int       @id @default(autoincrement())
  stopList  Json      // [{ product: string, date: string, id: number }]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}


model RemarkReport {
  id        Int      @id @default(autoincrement())
  date      DateTime
  remarks   Remark[] 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Remark {
  id             Int      @id @default(autoincrement())
  name           String   @default("")
  dayHours       String   @default("")
  nightHours     String   @default("")
  reason         String   @default("")
  penality       String   @default("")
  reasonPenality String   @default("")

  reportId Int
  report   RemarkReport @relation(fields: [reportId], references: [id], onDelete: Cascade)
}





generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model BreakeList {
  id   Int      @id @default(autoincrement())
  date DateTime @unique
  rows Row[]

  @@index([date])
}

model Row {
  id         Int        @id @default(autoincrement())
  externalId String
  name       String?
  scheduleId Int
  schedule   BreakeList @relation(fields: [scheduleId], references: [id], onDelete: Cascade)

  h_9  String? @db.Char(2)
  h_10 String? @db.Char(2)
  h_11 String? @db.Char(2)
  h_12 String? @db.Char(2)
  h_13 String? @db.Char(2)
  h_14 String? @db.Char(2)
  h_15 String? @db.Char(2)
  h_16 String? @db.Char(2)
  h_17 String? @db.Char(2)
  h_18 String? @db.Char(2)
  h_19 String? @db.Char(2)
  h_20 String? @db.Char(2)
  h_21 String? @db.Char(2)
  h_22 String? @db.Char(2)
  h_23 String? @db.Char(2)
  h_24 String? @db.Char(2)
  h_01 String? @db.Char(2)
  h_02 String? @db.Char(2)
  h_03 String? @db.Char(2)
  h_04 String? @db.Char(2)
  h_05 String? @db.Char(2)
  h_06 String? @db.Char(2)
  h_07 String? @db.Char(2)
  h_00 String? @db.Char(2)

  @@index([scheduleId])
}

model DailyReport {
  id              Int               @id @default(autoincrement())
  date            DateTime
  cashVerify      CashVerify[]
  expenses        Expense[]
  tobacco         Tobacco[]
  productTransfer ProductTransfer[]
  inventory       Inventory[]
  notes           String?
}

model Inventory {
  id       Int         @id @default(autoincrement())
  name     String
  quantity String
  reportId Int
  report   DailyReport @relation(fields: [reportId], references: [id], onDelete: Cascade)
}

model ProductTransfer {
  id          Int         @id @default(autoincrement())
  name        String
  quantity    String
  destination String
  reportId    Int
  report      DailyReport @relation(fields: [reportId], references: [id], onDelete: Cascade)
}

model CashVerify {
  id       Int         @id @default(autoincrement())
  hours    String
  value    String
  reportId Int
  report   DailyReport @relation(fields: [reportId], references: [id], onDelete: Cascade)
}

model Tobacco {
  id         Int         @id @default(autoincrement())
  name       String
  stock      Int         @default(0)
  incoming   Int?
  outgoing   Int?
  finalStock String
  reportId   Int
  report     DailyReport @relation(fields: [reportId], references: [id], onDelete: Cascade)
}

model Expense {
  id       Int         @id @default(autoincrement())
  name     String
  sum      String
  reportId Int
  report   DailyReport @relation(fields: [reportId], references: [id], onDelete: Cascade)
}

model RemarkReport {
  id        Int      @id @default(autoincrement())
  date      DateTime
  createdAt DateTime @default(now())
  remarks   Remark[]
}

model Remark {
  id         Int          @id @default(autoincrement())
  name       String       @default("")
  dayHours   String       @default("")
  nightHours String       @default("")
  reason     String       @default("")
  penality   String       @default("")
  reportId   Int
  report     RemarkReport @relation(fields: [reportId], references: [id], onDelete: Cascade)
}

model DailyReportCucina {
  id    Int      @id @default(autoincrement())
  date  DateTime
  notes String?

  shifts   Shift[]    @relation("DailyReportCucinaShifts")
  remains  Remain[]   @relation("DailyReportCucinaRemains")
  prepared Prepared[] @relation("DailyReportCucinaPreparedSalads")
  staff    Staff[]    @relation("DailyReportCucinaStaff")
  movement Movement[] @relation("DailyReportCucinaMovement")
  writeOff WriteOff[] @relation("DailyReportCucinaWriteOff")
}

model Shift {
  id        Int               @id @default(autoincrement())
  name      String?
  time      String
  over      String
  employees String
  report    DailyReportCucina @relation("DailyReportCucinaShifts", fields: [reportId], references: [id], onDelete: Cascade)
  reportId  Int
}

model Remain {
  id       Int               @id @default(autoincrement())
  product  String
  portions String
  weight   String
  report   DailyReportCucina @relation("DailyReportCucinaRemains", fields: [reportId], references: [id], onDelete: Cascade)
  reportId Int
}

model Prepared {
  id       Int               @id @default(autoincrement())
  product  String
  portions String
  weight   String
  time     String?
  report   DailyReportCucina @relation("DailyReportCucinaPreparedSalads", fields: [reportId], references: [id], onDelete: Cascade)
  reportId Int
}

model Staff {
  id       Int               @id @default(autoincrement())
  product  String
  portions String
  weight   String
  time     String?
  report   DailyReportCucina @relation("DailyReportCucinaStaff", fields: [reportId], references: [id], onDelete: Cascade)
  reportId Int
}

model Movement {
  id          Int               @id @default(autoincrement())
  nameOutside String
  nameInside  String
  weight      String
  report      DailyReportCucina @relation("DailyReportCucinaMovement", fields: [reportId], references: [id], onDelete: Cascade)
  reportId    Int
}

model WriteOff {
  id       Int               @id @default(autoincrement())
  product  String
  weight   String
  reason   String
  report   DailyReportCucina @relation("DailyReportCucinaWriteOff", fields: [reportId], references: [id], onDelete: Cascade)
  reportId Int
}
